package server

import (
	"fmt"
	"log"
	"net"
	"os"
	"os/signal"
	"sync"
	"syscall"
)

type Server struct {
	listener net.Listener   // TCP —Å–ª—É—à–∞—Ç–µ–ª—å
	wg       sync.WaitGroup // –ì—Ä—É–ø–ø–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	stop     chan struct{}  // –ö–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
}

func NewServer() *Server {
	return &Server{
		stop: make(chan struct{}), // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	}
}

func (s *Server) Start(address, wisdoms string) error {
	// Load quotes
	if err := LoadQuotes(wisdoms); err != nil {
		return fmt.Errorf("failed to load quotes: %w", err)
	}

	// Open TCP port
	ln, err := net.Listen("tcp", address)
	if err != nil {
		return fmt.Errorf("failed to listen: %w", err)
	}
	s.listener = ln
	log.Printf("Server listening on %s", address)

	// Handle Ctrl+C / SIGTERM
	go s.handleSignals()

	//üîÅ –≠—Ç–æ—Ç —Ü–∏–∫–ª:
	//  –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∂–¥—ë—Ç –Ω–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
	//	–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ.
	//	–£—á–∏—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é sync.WaitGroup.
	//	–ê–¥–µ–∫–≤–∞—Ç–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ —Å–∏–≥–Ω–∞–ª—É (Ctrl+C, SIGTERM), –ø—Ä–µ—Ä—ã–≤–∞—è —Ü–∏–∫–ª –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞—è —Ä–∞–±–æ—Ç—É.
	for {
		conn, err := ln.Accept()
		if err != nil {
			select {
			case <-s.stop:
				log.Println("Server is shutting down.")
				return nil
			default:
				log.Printf("Accept error: %v", err)
				continue
			}
		}
		s.wg.Add(1)
		go func() {
			defer s.wg.Done()
			handleConnection(conn)
		}()
	}
}

func (s *Server) handleSignals() {
	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)
	<-sigCh
	s.Stop()
}

func (s *Server) Stop() {
	log.Println("Stopping server...")
	close(s.stop)
	if s.listener != nil {
		s.listener.Close()
	}
	s.wg.Wait()
	log.Println("Server shutdown complete.")
}
